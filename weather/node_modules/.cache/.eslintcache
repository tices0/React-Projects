[{"/mnt/c/Users/User/VS Code/React practice/Counter/counter/src/index.js":"1","/mnt/c/Users/User/VS Code/React practice/Counter/counter/src/App.js":"2","/mnt/c/Users/User/VS Code/React practice/Weather/weather/src/index.js":"3"},{"size":442,"mtime":1673737540521,"results":"4","hashOfConfig":"5"},{"size":812,"mtime":1673815081086,"results":"6","hashOfConfig":"5"},{"size":7501,"mtime":1675474638480,"results":"7","hashOfConfig":"8"},{"filePath":"9","messages":"10","suppressedMessages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1fogi54",{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},"1ovq8xw","/mnt/c/Users/User/VS Code/React practice/Counter/counter/src/index.js",[],[],"/mnt/c/Users/User/VS Code/React practice/Counter/counter/src/App.js",[],[],"/mnt/c/Users/User/VS Code/React practice/Weather/weather/src/index.js",["19"],[],"import React, { useState, useEffect } from \"react\";\r\nimport { createRoot } from \"react-dom/client\";\r\nimport \"./styles/style.css\";\r\n\r\n// find og country code so that time right always\r\n// change timezone every time new location searched\r\n\r\nlet currentLon;\r\nlet currentLat;\r\n\r\nconsole.log(window.innerWidth, \"window width\");\r\n\r\nlet lon;\r\nlet lat;\r\n\r\nfunction setGeo() {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tif (navigator.geolocation) {\r\n\t\t\tnavigator.geolocation.getCurrentPosition(position => {\r\n\t\t\t\tcurrentLon = position.coords.longitude;\r\n\t\t\t\tcurrentLat = position.coords.latitude;\r\n\t\t\t\treturn resolve([currentLon, currentLat]);\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\treturn reject(null);\r\n\t\t}\r\n\t});\r\n}\r\n\r\nconst getData = async (lon, lat, timezone) => {\r\n\tif (!timezone) {\r\n\t\ttimezone = \"GMT\";\r\n\t}\r\n\tconst res = await fetch(\r\n\t\t`https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&daily=weathercode&current_weather=true&timezone=${timezone}`,\r\n\t);\r\n\tconst data = await res.json();\r\n\treturn data;\r\n};\r\n\r\nfunction Sidebar() {\r\n\tconst [code, setCode] = useState(\"\");\r\n\tconst [codeSet, setCodeSet] = useState(false);\r\n\r\n\tconst [temp, setTemp] = useState();\r\n\tconst [label, setLabel] = useState();\r\n\tconst [date, setDate] = useState();\r\n\tconst [location, setLocation] = useState();\r\n\r\n\tconst [isCurrent, setIsCurrent] = useState(true);\r\n\tconst [onSearch, setOnSearch] = useState(false);\r\n\r\n\tconst [newLat, setLat] = useState();\r\n\tconst [newLon, setLon] = useState();\r\n\r\n\tuseEffect(() => {\r\n\t\tasync function setCurrent() {\r\n\t\t\tif (isCurrent) {\r\n\t\t\t\tconst both = await setGeo();\r\n\t\t\t\tlon = both[0];\r\n\t\t\t\tlat = both[1];\r\n\t\t\t\tconsole.log(\"current is true\");\r\n\t\t\t} else {\r\n\t\t\t\tlon = newLon;\r\n\t\t\t\tlat = newLat;\r\n\t\t\t\tconsole.log(\"current is false\");\r\n\t\t\t}\r\n\t\t\tconsole.log(\"lon:\", lon, \"lat:\", lat);\r\n\r\n\t\t\tlet data = await getData(lon, lat);\r\n\t\t\tconsole.log(data);\r\n\r\n\t\t\treturn setUp(data);\r\n\t\t}\r\n\r\n\t\tasync function setUp(data) {\r\n\t\t\tlet imgcode = weathercode(data);\r\n\t\t\tsetCode(imgcode);\r\n\t\t\tsetCodeSet(true);\r\n\r\n\t\t\tlet label = imgcode.replace(/([A-Z])/g, \" $1\").trim();\r\n\t\t\tsetLabel(label);\r\n\t\t\tconsole.log(label, \"label\");\r\n\r\n\t\t\tlet current_temp = data.current_weather.temperature;\r\n\t\t\tsetTemp(Math.round(current_temp));\r\n\r\n\t\t\tlet date = new Date(\r\n\t\t\t\tdata.current_weather.time.split(\"T\")[0],\r\n\t\t\t).toString(\"ddd, d MMM\");\r\n\t\t\tsetDate(date);\r\n\r\n\t\t\tlet location = await locationToCity(lon, lat);\r\n\t\t\tsetLocation(location);\r\n\t\t}\r\n\r\n\t\tsetCurrent();\r\n\t}, [code, temp, label, date, location, isCurrent, newLat, newLon]);\r\n\r\n\tconst [search, setSearch] = useState(\"\");\r\n\r\n\tconst handleSubmit = async event => {\r\n\t\tevent.preventDefault();\r\n\t\tconst res = await fetch(\r\n\t\t\t`https://nominatim.openstreetmap.org/?addressdetails=1&q=${search}&format=json&limit=1`,\r\n\t\t);\r\n\t\tconst data = await res.json();\r\n\t\tsetOnSearch(false);\r\n\t\tsetIsCurrent(false);\r\n\t\tsetSearch(\"\");\r\n\r\n\t\tsetLat(parseFloat(data[0].lat));\r\n\t\tsetLon(parseFloat(data[0].lon));\r\n\t};\r\n\r\n\tconst InsideSection = () => {\r\n\t\tif (onSearch) {\r\n\t\t\treturn (\r\n\t\t\t\t<>\r\n\t\t\t\t\t<div className=\"search-container\">\r\n\t\t\t\t\t\t<i\r\n\t\t\t\t\t\t\tclassName=\"fa-solid fa-xmark fa-xl\"\r\n\t\t\t\t\t\t\tonClick={() => setOnSearch(false)}\r\n\t\t\t\t\t\t></i>\r\n\t\t\t\t\t\t<form action=\"\" onSubmit={handleSubmit}>\r\n\t\t\t\t\t\t\t<div className=\"bar\">\r\n\t\t\t\t\t\t\t\t<i className=\"fa-solid fa-magnifying-glass\"></i>\r\n\t\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\t\tclassName=\"search\"\r\n\t\t\t\t\t\t\t\t\tplaceholder=\"search location\"\r\n\t\t\t\t\t\t\t\t\tonChange={event =>\r\n\t\t\t\t\t\t\t\t\t\tsetSearch(event.target.value)\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tvalue={search}\r\n\t\t\t\t\t\t\t\t\tautoFocus\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\ttype=\"submit\"\r\n\t\t\t\t\t\t\t\tvalue=\"Search\"\r\n\t\t\t\t\t\t\t\tclassName=\"submit\"\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</form>\r\n\t\t\t\t\t\t<ul className=\"results\">\r\n\t\t\t\t\t\t\t<li className=\"result\">\r\n\t\t\t\t\t\t\t\tLondon{\" \"}\r\n\t\t\t\t\t\t\t\t<i className=\"fa-solid fa-chevron-right\"></i>\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t<li className=\"result\">\r\n\t\t\t\t\t\t\t\tBarcelona{\" \"}\r\n\t\t\t\t\t\t\t\t<i className=\"fa-solid fa-chevron-right\"></i>\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t<li className=\"result\">\r\n\t\t\t\t\t\t\t\tParis{\" \"}\r\n\t\t\t\t\t\t\t\t<i className=\"fa-solid fa-chevron-right\"></i>\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</>\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\t// else\r\n\t\treturn (\r\n\t\t\t<>\r\n\t\t\t\t<div className=\"top\">\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tclassName=\"places\"\r\n\t\t\t\t\t\tonClick={() => setOnSearch(true)}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tSearch for places\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tclassName=\"current\"\r\n\t\t\t\t\t\tonClick={() => setIsCurrent(true)}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<i className=\"fa-solid fa-location-crosshairs fa-xl\"></i>\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"background\">\r\n\t\t\t\t\t<img\r\n\t\t\t\t\t\tsrc={require(\"./media/Cloud-background.png\")}\r\n\t\t\t\t\t\talt=\"Cloud Background\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"image\">\r\n\t\t\t\t\t{codeSet ? (\r\n\t\t\t\t\t\t<img src={require(`./media/${code}.png`)} alt=\"\" />\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\"\"\r\n\t\t\t\t\t)}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"temp\">\r\n\t\t\t\t\t{codeSet ? <span>{temp}</span> : \"\"}\r\n\t\t\t\t\t<i>&#176;C</i>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"label\">\r\n\t\t\t\t\t{codeSet ? <span>{label}</span> : \"\"}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"date\">\r\n\t\t\t\t\t<span>Today</span> <i className=\"fa-solid fa-circle\"></i>\r\n\t\t\t\t\t{codeSet ? <span>{date}</span> : \"\"}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"location\">\r\n\t\t\t\t\t<i className=\"fa-solid fa-location-dot\"></i>\r\n\t\t\t\t\t{codeSet ? <span>{location}</span> : \"\"}\r\n\t\t\t\t</div>\r\n\t\t\t</>\r\n\t\t);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<section className=\"sidebar\">\r\n\t\t\t<InsideSection />\r\n\t\t</section>\r\n\t);\r\n}\r\n\r\nfunction getTimezone(code) {\r\n\tconst ct = require(\"countries-and-timezones\");\r\n\tconst country = ct.getCountry(code.toUpperCase());\r\n\treturn country.timezones[0];\r\n}\r\n\r\nfunction weathercode(data) {\r\n\tconst code = data.current_weather.weathercode;\r\n\tlet img;\r\n\tif (code === 0) {\r\n\t\timg = \"Clear\";\r\n\t} else if (code < 3) {\r\n\t\timg = \"LightCloud\";\r\n\t} else if (code === 3) {\r\n\t\timg = \"HeavyCloud\";\r\n\t} else if ((code > 50 && code < 56) || code === 61) {\r\n\t\timg = \"LightRain\";\r\n\t} else if (\r\n\t\tcode === 56 ||\r\n\t\tcode === 57 ||\r\n\t\tcode === 66 ||\r\n\t\tcode === 67 ||\r\n\t\tcode === 85 ||\r\n\t\tcode === 86\r\n\t) {\r\n\t\timg = \"Sleet\";\r\n\t} else if (code === 63 || code === 65) {\r\n\t\timg = \"HeavyRain\";\r\n\t} else if (code > 70 && code < 76) {\r\n\t\timg = \"Snow\";\r\n\t} else if (code === 77) {\r\n\t\timg = \"Hail\";\r\n\t} else if (code > 79 && code < 84) {\r\n\t\timg = \"Showers\";\r\n\t} else if (code === 95 || code === 96 || code === 99) {\r\n\t\timg = \"Thunderstorm\";\r\n\t} else {\r\n\t\treturn console.error(\"Invalid Weather Code\");\r\n\t}\r\n\treturn img;\r\n}\r\n\r\nasync function locationToCity(lon, lat) {\r\n\tconst res = await fetch(\r\n\t\t`https://nominatim.openstreetmap.org/reverse?format=geocodejson&lat=${lat}&lon=${lon}`,\r\n\t);\r\n\tconst data = await res.json();\r\n\r\n\tlet rtn;\r\n\tif (data.features[0].properties.geocoding.city) {\r\n\t\trtn = data.features[0].properties.geocoding.city;\r\n\t} else if (data.features[0].properties.geocoding.county) {\r\n\t\trtn = data.features[0].properties.geocoding.county;\r\n\t} else if (data.features[0].properties.geocoding.state) {\r\n\t\trtn = data.features[0].properties.geocoding.state;\r\n\t} else if (data.features[0].properties.geocoding.country) {\r\n\t\trtn = data.features[0].properties.geocoding.country;\r\n\t} else {\r\n\t\trtn = data.features[0].properties.geocoding.place;\r\n\t}\r\n\treturn rtn;\r\n}\r\n\r\nconst sidebar = createRoot(document.querySelector(\"#sidebar\"));\r\nsidebar.render(<Sidebar />);\r\n\r\n// fetch(\r\n// \t`https://nominatim.openstreetmap.org/?addressdetails=1&q=London&format=json&limit=1`,\r\n// \t{\r\n// \t\tmethod: \"GET\",\r\n// \t},\r\n// )\r\n// \t.then(res => res.json())\r\n// \t.then(data => console.log(data))\r\n// \t.catch(error => console.error(error));\r\n",{"ruleId":"20","severity":1,"message":"21","line":220,"column":10,"nodeType":"22","messageId":"23","endLine":220,"endColumn":21},"no-unused-vars","'getTimezone' is defined but never used.","Identifier","unusedVar"]